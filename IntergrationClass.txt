// FacetliftController

public without sharing class FaceliftController {
    
    @AuraEnabled
    public static list<FaceLiftDataWrapper> getData(){
        //we will use below code to get real data
          /* HttpRequest req = new HttpRequest();
           req.setHeader('Authorization','Bearer' + UserInfo.getSessionId());
           req.setHeader('Content-Type', 'application/json');
           String myEndPoint= URL.getSalesforceBaseUrl().toExternalForm();
           
           //get mapping Custom Metadata type
           WcisSearch_Configuration__mdt cmdt = UtilsICISSettings.getFacetmetadata();
           String DisplayName = cmdt.DisplayName__c;
           //req.setEndpoint(myEndPoint + '/services/data/v28.0/tooling/query/?q=Select+id,developername+from+customfield+Where+tableenumorid=\'' +DisplayName +'\'');
           req.setMethod('GET');
           Http h = new Http();
           HttpResponse res= h.send(req); 
           Map<String, Object> m = (Map<String, Object>)JSON.deserializeUntyped(res.getBody()); */
        
          //below code is to mock with hardcoded json
          map<string,FaceLiftDataWrapper> dataMap = new  map<string,FaceLiftDataWrapper>();
          map<String,WcisSearch_Configuration__mdt> mdt_DisplayNameToAll = new  map<String,WcisSearch_Configuration__mdt>();
          mdt_DisplayNameToAll = UtilsICISSettings.getFacetmetaDataList();
          List<Object> records = (List<Object>)JSON.deserializeUntyped(JSONString.myJsonFormat); 
         
          system.debug(records);
           for(Object obj:records){
              Map<String,Object> data = (Map<String,Object>)obj;
               
               if(mdt_DisplayNameToAll.containsKey((String)data.get('Facet'))){
                   String key_Displayname = mdt_DisplayNameToAll.get((String)data.get('Facet')).DisplayName__c;
                   
                   if(!dataMap.containsKey(key_Displayname)){
                       FaceLiftDataWrapper FDobj = new FaceLiftDataWrapper();
                       FDobj.DisplayName = key_Displayname;
                       FDobj.ItemCount   = (Integer)data.get('ItemCount');
                       FDobj.FaceLiftSortOrder = (Integer)mdt_DisplayNameToAll.get((String)data.get('Facet')).FacetListOrder__c;
                       
                       FDobj.Items_FacetCountsList = new List<FacetCount_ItemsWrapper>();
                       FacetCount_ItemsWrapper Fcount_ItemsObj = new FacetCount_ItemsWrapper();
                       Fcount_ItemsObj.Item = (String)data.get('Item');
                       Fcount_ItemsObj.FacetCount = (Integer)data.get('FacetCount');
                       FDobj.Items_FacetCountsList.add(Fcount_ItemsObj);
                       dataMap.put(key_Displayname,FDobj);
                   }else{
                       FaceLiftDataWrapper FDobj = dataMap.get(key_Displayname);
                       List<FacetCount_ItemsWrapper> FIList = new List<FacetCount_ItemsWrapper>();
                       FIList = FDobj.Items_FacetCountsList;
                       
                       FacetCount_ItemsWrapper Fcount_ItemsObj = new FacetCount_ItemsWrapper();
                       Fcount_ItemsObj.Item = (String)data.get('Item');
                       Fcount_ItemsObj.FacetCount = (Integer)data.get('FacetCount');
                       FIList.add(Fcount_ItemsObj);
                       FDobj.Items_FacetCountsList = FIList;
                       
                       dataMap.put(key_Displayname,FDobj);
                       
                       
                   }
                   
               }
               
               system.debug(data.get('DisplayName'));
              
           }
            system.debug('dataMap'+dataMap);
        return dataMap.values();
    }
    public class FaceLiftDataWrapper{
        @AuraEnabled
        public Integer FaceLiftSortOrder{get;set;}
        @AuraEnabled
        public String DisplayName{get;set;}
        @AuraEnabled
        public Integer ItemCount{get;set;}
        @AuraEnabled
        List<FacetCount_ItemsWrapper> Items_FacetCountsList{get;set;}

    }
    public class FacetCount_ItemsWrapper{
        @AuraEnabled
        public String Item{get;set;}
         @AuraEnabled
        public Integer FacetCount{get;set;}
    }
    @AuraEnabled
    public static List<Object> getTableData(String Facet, String DisplayName){
           HttpRequest req = new HttpRequest();
           //req.setHeader('Authorization','Bearer' + UserInfo.getSessionId());
           req.setHeader('Content-Type', 'application/json');
          
           req.setEndpoint('https://api.myjson.com/bins/18anz0');
           req.setMethod('GET');
           Http h = new Http();
           HttpResponse res= h.send(req);
           system.debug('res.getBody()'+res.getBody());
           List<Object> records = (List<Object>)JSON.deserializeUntyped(res.getBody()); 
          system.debug('$$$$$'+records);
        return records;
    }
   @AuraEnabled
    public static List<WcisSearch_Configuration__mdt> getMetaDataConfig(){
        return [SELECT id,DeveloperName,Display__c, DisplayName__c, IsSearchable__c, IsVisible__c, FacetListOrder__c,SelectOrder__c FROM WcisSearch_Configuration__mdt];
    }
    @AuraEnabled
    public static List<Object> findByName(String searchKey){
        map<String,WcisSearch_Configuration__mdt>  mpMetadata = UtilsICISSettings.getFacetmetaDataList();
        set<String> setGridColumn = new set<String>();
        for(String strGridColumn:mpMetadata.keyset()){
            if(mpMetadata.get(strGridColumn).Display__c == 'InGrid' || mpMetadata.get(strGridColumn).Display__c == 'Both'){
                setGridColumn.add(strGridColumn);
            }
        }
        System.debug('GridColumn'+setGridColumn);
        HttpRequest req = new HttpRequest();
        req.setHeader('Content-Type', 'application/json');
          //we will replace endpoint URL later
           req.setEndpoint('https://api.myjson.com/bins/18anz0');
           req.setMethod('GET');
           Http h = new Http();
           HttpResponse res= h.send(req);
           system.debug('res.getBody()'+res.getBody());
           List<Object> filtered = new List<Object>();
           List<Object> records = (List<Object>)JSON.deserializeUntyped(res.getBody()); 
           for(Object obj:records){
              Map<String,Object> data = (Map<String,Object>)obj;
               for(String str:setGridColumn){
                   if(data.containskey(str)  ){
                       String val = (String)data.get(str);
                       if(val.contains(searchKey)){//here condition need to check if you want to check searchkey as substring or compare 
                           filtered.add(obj);
                           break;
                       }
                   }
               }
           }
        return filtered;
    }
}